/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.efuture.titan.metastore;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Table implements org.apache.thrift.TBase<Table, Table._Fields>, java.io.Serializable, Cloneable, Comparable<Table> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Table");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tableType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PARTITION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionKey", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("dataNodes", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CHILD_TABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("childTables", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PARENT_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("parentTable", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PARENT_JOIN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("parentJoinKey", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField JOIN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("joinKey", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TableTupleSchemeFactory());
  }

  public String name; // required
  public String description; // required
  public String dbName; // required
  public String tableType; // required
  public FieldSchema partitionKey; // required
  public PartitionRule rule; // required
  public List<DataNode> dataNodes; // required
  public List<String> childTables; // required
  public String parentTable; // required
  public FieldSchema parentJoinKey; // required
  public FieldSchema joinKey; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    DESCRIPTION((short)2, "description"),
    DB_NAME((short)3, "dbName"),
    TABLE_TYPE((short)4, "tableType"),
    PARTITION_KEY((short)5, "partitionKey"),
    RULE((short)6, "rule"),
    DATA_NODES((short)7, "dataNodes"),
    CHILD_TABLES((short)8, "childTables"),
    PARENT_TABLE((short)9, "parentTable"),
    PARENT_JOIN_KEY((short)10, "parentJoinKey"),
    JOIN_KEY((short)11, "joinKey");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // DB_NAME
          return DB_NAME;
        case 4: // TABLE_TYPE
          return TABLE_TYPE;
        case 5: // PARTITION_KEY
          return PARTITION_KEY;
        case 6: // RULE
          return RULE;
        case 7: // DATA_NODES
          return DATA_NODES;
        case 8: // CHILD_TABLES
          return CHILD_TABLES;
        case 9: // PARENT_TABLE
          return PARENT_TABLE;
        case 10: // PARENT_JOIN_KEY
          return PARENT_JOIN_KEY;
        case 11: // JOIN_KEY
          return JOIN_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tableType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_KEY, new org.apache.thrift.meta_data.FieldMetaData("partitionKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldSchema.class)));
    tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartitionRule.class)));
    tmpMap.put(_Fields.DATA_NODES, new org.apache.thrift.meta_data.FieldMetaData("dataNodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataNode.class))));
    tmpMap.put(_Fields.CHILD_TABLES, new org.apache.thrift.meta_data.FieldMetaData("childTables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARENT_TABLE, new org.apache.thrift.meta_data.FieldMetaData("parentTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_JOIN_KEY, new org.apache.thrift.meta_data.FieldMetaData("parentJoinKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldSchema.class)));
    tmpMap.put(_Fields.JOIN_KEY, new org.apache.thrift.meta_data.FieldMetaData("joinKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldSchema.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Table.class, metaDataMap);
  }

  public Table() {
  }

  public Table(
    String name,
    String description,
    String dbName,
    String tableType,
    FieldSchema partitionKey,
    PartitionRule rule,
    List<DataNode> dataNodes,
    List<String> childTables,
    String parentTable,
    FieldSchema parentJoinKey,
    FieldSchema joinKey)
  {
    this();
    this.name = name;
    this.description = description;
    this.dbName = dbName;
    this.tableType = tableType;
    this.partitionKey = partitionKey;
    this.rule = rule;
    this.dataNodes = dataNodes;
    this.childTables = childTables;
    this.parentTable = parentTable;
    this.parentJoinKey = parentJoinKey;
    this.joinKey = joinKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Table(Table other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetDbName()) {
      this.dbName = other.dbName;
    }
    if (other.isSetTableType()) {
      this.tableType = other.tableType;
    }
    if (other.isSetPartitionKey()) {
      this.partitionKey = new FieldSchema(other.partitionKey);
    }
    if (other.isSetRule()) {
      this.rule = new PartitionRule(other.rule);
    }
    if (other.isSetDataNodes()) {
      List<DataNode> __this__dataNodes = new ArrayList<DataNode>(other.dataNodes.size());
      for (DataNode other_element : other.dataNodes) {
        __this__dataNodes.add(new DataNode(other_element));
      }
      this.dataNodes = __this__dataNodes;
    }
    if (other.isSetChildTables()) {
      List<String> __this__childTables = new ArrayList<String>(other.childTables);
      this.childTables = __this__childTables;
    }
    if (other.isSetParentTable()) {
      this.parentTable = other.parentTable;
    }
    if (other.isSetParentJoinKey()) {
      this.parentJoinKey = new FieldSchema(other.parentJoinKey);
    }
    if (other.isSetJoinKey()) {
      this.joinKey = new FieldSchema(other.joinKey);
    }
  }

  public Table deepCopy() {
    return new Table(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.description = null;
    this.dbName = null;
    this.tableType = null;
    this.partitionKey = null;
    this.rule = null;
    this.dataNodes = null;
    this.childTables = null;
    this.parentTable = null;
    this.parentJoinKey = null;
    this.joinKey = null;
  }

  public String getName() {
    return this.name;
  }

  public Table setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public Table setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getDbName() {
    return this.dbName;
  }

  public Table setDbName(String dbName) {
    this.dbName = dbName;
    return this;
  }

  public void unsetDbName() {
    this.dbName = null;
  }

  /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.dbName != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.dbName = null;
    }
  }

  public String getTableType() {
    return this.tableType;
  }

  public Table setTableType(String tableType) {
    this.tableType = tableType;
    return this;
  }

  public void unsetTableType() {
    this.tableType = null;
  }

  /** Returns true if field tableType is set (has been assigned a value) and false otherwise */
  public boolean isSetTableType() {
    return this.tableType != null;
  }

  public void setTableTypeIsSet(boolean value) {
    if (!value) {
      this.tableType = null;
    }
  }

  public FieldSchema getPartitionKey() {
    return this.partitionKey;
  }

  public Table setPartitionKey(FieldSchema partitionKey) {
    this.partitionKey = partitionKey;
    return this;
  }

  public void unsetPartitionKey() {
    this.partitionKey = null;
  }

  /** Returns true if field partitionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionKey() {
    return this.partitionKey != null;
  }

  public void setPartitionKeyIsSet(boolean value) {
    if (!value) {
      this.partitionKey = null;
    }
  }

  public PartitionRule getRule() {
    return this.rule;
  }

  public Table setRule(PartitionRule rule) {
    this.rule = rule;
    return this;
  }

  public void unsetRule() {
    this.rule = null;
  }

  /** Returns true if field rule is set (has been assigned a value) and false otherwise */
  public boolean isSetRule() {
    return this.rule != null;
  }

  public void setRuleIsSet(boolean value) {
    if (!value) {
      this.rule = null;
    }
  }

  public int getDataNodesSize() {
    return (this.dataNodes == null) ? 0 : this.dataNodes.size();
  }

  public java.util.Iterator<DataNode> getDataNodesIterator() {
    return (this.dataNodes == null) ? null : this.dataNodes.iterator();
  }

  public void addToDataNodes(DataNode elem) {
    if (this.dataNodes == null) {
      this.dataNodes = new ArrayList<DataNode>();
    }
    this.dataNodes.add(elem);
  }

  public List<DataNode> getDataNodes() {
    return this.dataNodes;
  }

  public Table setDataNodes(List<DataNode> dataNodes) {
    this.dataNodes = dataNodes;
    return this;
  }

  public void unsetDataNodes() {
    this.dataNodes = null;
  }

  /** Returns true if field dataNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetDataNodes() {
    return this.dataNodes != null;
  }

  public void setDataNodesIsSet(boolean value) {
    if (!value) {
      this.dataNodes = null;
    }
  }

  public int getChildTablesSize() {
    return (this.childTables == null) ? 0 : this.childTables.size();
  }

  public java.util.Iterator<String> getChildTablesIterator() {
    return (this.childTables == null) ? null : this.childTables.iterator();
  }

  public void addToChildTables(String elem) {
    if (this.childTables == null) {
      this.childTables = new ArrayList<String>();
    }
    this.childTables.add(elem);
  }

  public List<String> getChildTables() {
    return this.childTables;
  }

  public Table setChildTables(List<String> childTables) {
    this.childTables = childTables;
    return this;
  }

  public void unsetChildTables() {
    this.childTables = null;
  }

  /** Returns true if field childTables is set (has been assigned a value) and false otherwise */
  public boolean isSetChildTables() {
    return this.childTables != null;
  }

  public void setChildTablesIsSet(boolean value) {
    if (!value) {
      this.childTables = null;
    }
  }

  public String getParentTable() {
    return this.parentTable;
  }

  public Table setParentTable(String parentTable) {
    this.parentTable = parentTable;
    return this;
  }

  public void unsetParentTable() {
    this.parentTable = null;
  }

  /** Returns true if field parentTable is set (has been assigned a value) and false otherwise */
  public boolean isSetParentTable() {
    return this.parentTable != null;
  }

  public void setParentTableIsSet(boolean value) {
    if (!value) {
      this.parentTable = null;
    }
  }

  public FieldSchema getParentJoinKey() {
    return this.parentJoinKey;
  }

  public Table setParentJoinKey(FieldSchema parentJoinKey) {
    this.parentJoinKey = parentJoinKey;
    return this;
  }

  public void unsetParentJoinKey() {
    this.parentJoinKey = null;
  }

  /** Returns true if field parentJoinKey is set (has been assigned a value) and false otherwise */
  public boolean isSetParentJoinKey() {
    return this.parentJoinKey != null;
  }

  public void setParentJoinKeyIsSet(boolean value) {
    if (!value) {
      this.parentJoinKey = null;
    }
  }

  public FieldSchema getJoinKey() {
    return this.joinKey;
  }

  public Table setJoinKey(FieldSchema joinKey) {
    this.joinKey = joinKey;
    return this;
  }

  public void unsetJoinKey() {
    this.joinKey = null;
  }

  /** Returns true if field joinKey is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinKey() {
    return this.joinKey != null;
  }

  public void setJoinKeyIsSet(boolean value) {
    if (!value) {
      this.joinKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((String)value);
      }
      break;

    case TABLE_TYPE:
      if (value == null) {
        unsetTableType();
      } else {
        setTableType((String)value);
      }
      break;

    case PARTITION_KEY:
      if (value == null) {
        unsetPartitionKey();
      } else {
        setPartitionKey((FieldSchema)value);
      }
      break;

    case RULE:
      if (value == null) {
        unsetRule();
      } else {
        setRule((PartitionRule)value);
      }
      break;

    case DATA_NODES:
      if (value == null) {
        unsetDataNodes();
      } else {
        setDataNodes((List<DataNode>)value);
      }
      break;

    case CHILD_TABLES:
      if (value == null) {
        unsetChildTables();
      } else {
        setChildTables((List<String>)value);
      }
      break;

    case PARENT_TABLE:
      if (value == null) {
        unsetParentTable();
      } else {
        setParentTable((String)value);
      }
      break;

    case PARENT_JOIN_KEY:
      if (value == null) {
        unsetParentJoinKey();
      } else {
        setParentJoinKey((FieldSchema)value);
      }
      break;

    case JOIN_KEY:
      if (value == null) {
        unsetJoinKey();
      } else {
        setJoinKey((FieldSchema)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case DB_NAME:
      return getDbName();

    case TABLE_TYPE:
      return getTableType();

    case PARTITION_KEY:
      return getPartitionKey();

    case RULE:
      return getRule();

    case DATA_NODES:
      return getDataNodes();

    case CHILD_TABLES:
      return getChildTables();

    case PARENT_TABLE:
      return getParentTable();

    case PARENT_JOIN_KEY:
      return getParentJoinKey();

    case JOIN_KEY:
      return getJoinKey();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case DB_NAME:
      return isSetDbName();
    case TABLE_TYPE:
      return isSetTableType();
    case PARTITION_KEY:
      return isSetPartitionKey();
    case RULE:
      return isSetRule();
    case DATA_NODES:
      return isSetDataNodes();
    case CHILD_TABLES:
      return isSetChildTables();
    case PARENT_TABLE:
      return isSetParentTable();
    case PARENT_JOIN_KEY:
      return isSetParentJoinKey();
    case JOIN_KEY:
      return isSetJoinKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Table)
      return this.equals((Table)that);
    return false;
  }

  public boolean equals(Table that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_dbName = true && this.isSetDbName();
    boolean that_present_dbName = true && that.isSetDbName();
    if (this_present_dbName || that_present_dbName) {
      if (!(this_present_dbName && that_present_dbName))
        return false;
      if (!this.dbName.equals(that.dbName))
        return false;
    }

    boolean this_present_tableType = true && this.isSetTableType();
    boolean that_present_tableType = true && that.isSetTableType();
    if (this_present_tableType || that_present_tableType) {
      if (!(this_present_tableType && that_present_tableType))
        return false;
      if (!this.tableType.equals(that.tableType))
        return false;
    }

    boolean this_present_partitionKey = true && this.isSetPartitionKey();
    boolean that_present_partitionKey = true && that.isSetPartitionKey();
    if (this_present_partitionKey || that_present_partitionKey) {
      if (!(this_present_partitionKey && that_present_partitionKey))
        return false;
      if (!this.partitionKey.equals(that.partitionKey))
        return false;
    }

    boolean this_present_rule = true && this.isSetRule();
    boolean that_present_rule = true && that.isSetRule();
    if (this_present_rule || that_present_rule) {
      if (!(this_present_rule && that_present_rule))
        return false;
      if (!this.rule.equals(that.rule))
        return false;
    }

    boolean this_present_dataNodes = true && this.isSetDataNodes();
    boolean that_present_dataNodes = true && that.isSetDataNodes();
    if (this_present_dataNodes || that_present_dataNodes) {
      if (!(this_present_dataNodes && that_present_dataNodes))
        return false;
      if (!this.dataNodes.equals(that.dataNodes))
        return false;
    }

    boolean this_present_childTables = true && this.isSetChildTables();
    boolean that_present_childTables = true && that.isSetChildTables();
    if (this_present_childTables || that_present_childTables) {
      if (!(this_present_childTables && that_present_childTables))
        return false;
      if (!this.childTables.equals(that.childTables))
        return false;
    }

    boolean this_present_parentTable = true && this.isSetParentTable();
    boolean that_present_parentTable = true && that.isSetParentTable();
    if (this_present_parentTable || that_present_parentTable) {
      if (!(this_present_parentTable && that_present_parentTable))
        return false;
      if (!this.parentTable.equals(that.parentTable))
        return false;
    }

    boolean this_present_parentJoinKey = true && this.isSetParentJoinKey();
    boolean that_present_parentJoinKey = true && that.isSetParentJoinKey();
    if (this_present_parentJoinKey || that_present_parentJoinKey) {
      if (!(this_present_parentJoinKey && that_present_parentJoinKey))
        return false;
      if (!this.parentJoinKey.equals(that.parentJoinKey))
        return false;
    }

    boolean this_present_joinKey = true && this.isSetJoinKey();
    boolean that_present_joinKey = true && that.isSetJoinKey();
    if (this_present_joinKey || that_present_joinKey) {
      if (!(this_present_joinKey && that_present_joinKey))
        return false;
      if (!this.joinKey.equals(that.joinKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Table other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbName()).compareTo(other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, other.dbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableType()).compareTo(other.isSetTableType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableType, other.tableType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionKey()).compareTo(other.isSetPartitionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionKey, other.partitionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataNodes()).compareTo(other.isSetDataNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataNodes, other.dataNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildTables()).compareTo(other.isSetChildTables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildTables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childTables, other.childTables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentTable()).compareTo(other.isSetParentTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentTable, other.parentTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentJoinKey()).compareTo(other.isSetParentJoinKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentJoinKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentJoinKey, other.parentJoinKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoinKey()).compareTo(other.isSetJoinKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinKey, other.joinKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Table(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbName:");
    if (this.dbName == null) {
      sb.append("null");
    } else {
      sb.append(this.dbName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableType:");
    if (this.tableType == null) {
      sb.append("null");
    } else {
      sb.append(this.tableType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionKey:");
    if (this.partitionKey == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rule:");
    if (this.rule == null) {
      sb.append("null");
    } else {
      sb.append(this.rule);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataNodes:");
    if (this.dataNodes == null) {
      sb.append("null");
    } else {
      sb.append(this.dataNodes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("childTables:");
    if (this.childTables == null) {
      sb.append("null");
    } else {
      sb.append(this.childTables);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentTable:");
    if (this.parentTable == null) {
      sb.append("null");
    } else {
      sb.append(this.parentTable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentJoinKey:");
    if (this.parentJoinKey == null) {
      sb.append("null");
    } else {
      sb.append(this.parentJoinKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("joinKey:");
    if (this.joinKey == null) {
      sb.append("null");
    } else {
      sb.append(this.joinKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (partitionKey != null) {
      partitionKey.validate();
    }
    if (rule != null) {
      rule.validate();
    }
    if (parentJoinKey != null) {
      parentJoinKey.validate();
    }
    if (joinKey != null) {
      joinKey.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TableStandardSchemeFactory implements SchemeFactory {
    public TableStandardScheme getScheme() {
      return new TableStandardScheme();
    }
  }

  private static class TableStandardScheme extends StandardScheme<Table> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Table struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbName = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableType = iprot.readString();
              struct.setTableTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTITION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partitionKey = new FieldSchema();
              struct.partitionKey.read(iprot);
              struct.setPartitionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rule = new PartitionRule();
              struct.rule.read(iprot);
              struct.setRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.dataNodes = new ArrayList<DataNode>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  DataNode _elem2;
                  _elem2 = new DataNode();
                  _elem2.read(iprot);
                  struct.dataNodes.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setDataNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHILD_TABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.childTables = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5;
                  _elem5 = iprot.readString();
                  struct.childTables.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setChildTablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARENT_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentTable = iprot.readString();
              struct.setParentTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARENT_JOIN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.parentJoinKey = new FieldSchema();
              struct.parentJoinKey.read(iprot);
              struct.setParentJoinKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // JOIN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.joinKey = new FieldSchema();
              struct.joinKey.read(iprot);
              struct.setJoinKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Table struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.dbName != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.dbName);
        oprot.writeFieldEnd();
      }
      if (struct.tableType != null) {
        oprot.writeFieldBegin(TABLE_TYPE_FIELD_DESC);
        oprot.writeString(struct.tableType);
        oprot.writeFieldEnd();
      }
      if (struct.partitionKey != null) {
        oprot.writeFieldBegin(PARTITION_KEY_FIELD_DESC);
        struct.partitionKey.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rule != null) {
        oprot.writeFieldBegin(RULE_FIELD_DESC);
        struct.rule.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.dataNodes != null) {
        oprot.writeFieldBegin(DATA_NODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dataNodes.size()));
          for (DataNode _iter6 : struct.dataNodes)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.childTables != null) {
        oprot.writeFieldBegin(CHILD_TABLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.childTables.size()));
          for (String _iter7 : struct.childTables)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.parentTable != null) {
        oprot.writeFieldBegin(PARENT_TABLE_FIELD_DESC);
        oprot.writeString(struct.parentTable);
        oprot.writeFieldEnd();
      }
      if (struct.parentJoinKey != null) {
        oprot.writeFieldBegin(PARENT_JOIN_KEY_FIELD_DESC);
        struct.parentJoinKey.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.joinKey != null) {
        oprot.writeFieldBegin(JOIN_KEY_FIELD_DESC);
        struct.joinKey.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TableTupleSchemeFactory implements SchemeFactory {
    public TableTupleScheme getScheme() {
      return new TableTupleScheme();
    }
  }

  private static class TableTupleScheme extends TupleScheme<Table> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Table struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetDbName()) {
        optionals.set(2);
      }
      if (struct.isSetTableType()) {
        optionals.set(3);
      }
      if (struct.isSetPartitionKey()) {
        optionals.set(4);
      }
      if (struct.isSetRule()) {
        optionals.set(5);
      }
      if (struct.isSetDataNodes()) {
        optionals.set(6);
      }
      if (struct.isSetChildTables()) {
        optionals.set(7);
      }
      if (struct.isSetParentTable()) {
        optionals.set(8);
      }
      if (struct.isSetParentJoinKey()) {
        optionals.set(9);
      }
      if (struct.isSetJoinKey()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetDbName()) {
        oprot.writeString(struct.dbName);
      }
      if (struct.isSetTableType()) {
        oprot.writeString(struct.tableType);
      }
      if (struct.isSetPartitionKey()) {
        struct.partitionKey.write(oprot);
      }
      if (struct.isSetRule()) {
        struct.rule.write(oprot);
      }
      if (struct.isSetDataNodes()) {
        {
          oprot.writeI32(struct.dataNodes.size());
          for (DataNode _iter8 : struct.dataNodes)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetChildTables()) {
        {
          oprot.writeI32(struct.childTables.size());
          for (String _iter9 : struct.childTables)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetParentTable()) {
        oprot.writeString(struct.parentTable);
      }
      if (struct.isSetParentJoinKey()) {
        struct.parentJoinKey.write(oprot);
      }
      if (struct.isSetJoinKey()) {
        struct.joinKey.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Table struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dbName = iprot.readString();
        struct.setDbNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tableType = iprot.readString();
        struct.setTableTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.partitionKey = new FieldSchema();
        struct.partitionKey.read(iprot);
        struct.setPartitionKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rule = new PartitionRule();
        struct.rule.read(iprot);
        struct.setRuleIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dataNodes = new ArrayList<DataNode>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            DataNode _elem12;
            _elem12 = new DataNode();
            _elem12.read(iprot);
            struct.dataNodes.add(_elem12);
          }
        }
        struct.setDataNodesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.childTables = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15;
            _elem15 = iprot.readString();
            struct.childTables.add(_elem15);
          }
        }
        struct.setChildTablesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.parentTable = iprot.readString();
        struct.setParentTableIsSet(true);
      }
      if (incoming.get(9)) {
        struct.parentJoinKey = new FieldSchema();
        struct.parentJoinKey.read(iprot);
        struct.setParentJoinKeyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.joinKey = new FieldSchema();
        struct.joinKey.read(iprot);
        struct.setJoinKeyIsSet(true);
      }
    }
  }

}

